plugins {
    id 'java'
    id 'io.qameta.allure' version '2.9.3'
    id("io.freefair.lombok") version "6.6.3"
}

group 'io.artbi.automation'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    allureVersion = '2.14.0'
    junitVersion = '5.9.1'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('copyExecutor', Copy) {
    from file("allure/executor.json")
    into file("build/allure-results")
}

dependencies {
    implementation('com.codeborne:selenide:6.12.3')
    implementation("io.qameta.allure:allure-selenide:${allureVersion}")
    implementation('org.assertj:assertj-core:3.23.1')
    implementation("com.fasterxml.jackson.core:jackson-databind:2.14.2")
    implementation('org.assertj:assertj-core:3.24.2')
    implementation('org.projectlombok:lombok:1.18.26')

    testImplementation('org.slf4j:slf4j-simple:1.7.30')
    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    systemProperty 'selenide.remote', System.getProperty('selenide.remote')
    useJUnitPlatform()
    maxParallelForks = Runtime.getRuntime().availableProcessors()

    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'same_thread'
    systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
    systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'fixed'
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'junit.jupiter.execution.parallel.config.fixed.parallelism', '4'
}

allure {
    autoconfigure = true
    version = "${allureVersion}"

    useJUnit5 {
        version = "${allureVersion}"
    }
}